--- 
title: "Seasonal Migration Periods"
format: dashboard
server: shiny
---

```{r}
#| context: setup
library(sf)
library(amt)
library(bslib)
library(leaflet)
library(tidyverse)
options(shiny.maxRequestSize=100*1024^2) 
```

## {.sidebar}

**Upload data**

```{r}
fileInput("csv1", "Movement data (csv):", accept=".csv")
fileInput("csv2", "Migration data (csv):", accept=".csv")
hr()
selectInput("herd", "Herd name:", choices=c("Little_Rancheria","Wolf_Lake"))
selectInput("id", "Select caribou:", choices=NULL)
selectInput("year", "Select year:", choices=NULL)
textInput("spring_notes", "Spring notes:", value=NULL)
textInput("fall_notes", "Fall notes:", value=NULL)
hr()
```

**NSD vs Time plots**

The two plots on the right show the relationship between NSD and "Day of year". NSD calculates the net squared displacement (i.e., the squared distance from the first location of a track) for a track.

```{r}
hr()
actionButton("log", "Save segments")
```

## Column {width=30%}

### Row {height="50%"}

```{r}
tableOutput("tab1a")
leafletOutput("map1")
```

### Row {height="50%"}

```{r}
tableOutput("tab1b")
leafletOutput("map2")
```

```{r}
#| context: server
observeEvent(input$csv1, {
  ids <- as.character(sort(unique(gps()$id)))
  yrs <- as.character(sort(unique(gps()$year)))
  updateSelectInput(session, "id", choices=ids, selected=ids[1])
  updateSelectInput(session, "year", choices=yrs, selected=yrs[1])
})

gps <- eventReactive(input$csv1, {
  req(input$csv1)
  read_csv(input$csv1$datapath) |>
    mutate(year = year(timestamp), yday=yday(timestamp)) # |> filter(id %in% 43140:43146)
})

mig <- eventReactive(input$csv2, {
  req(input$csv2)
  read_csv(input$csv2$datapath)
})

observe({
  note_spring <- mig()$Notes[mig()$Id==input$id & mig()$Year==input$year & mig()$Migration=="Spring"]
  note_fall <- mig()$Notes[mig()$Id==input$id & mig()$Year==input$year & mig()$Migration=="Fall"]
  updateTextInput(session, "spring_notes", value=note_spring)
  updateTextInput(session, "fall_notes", value=note_fall)
})

observeEvent(input$csv2, {
  start_spring <- yday(mig()$Start[mig()$Id==input$id & mig()$Year==input$year & mig()$Migration=="Spring"])
  end_spring <- yday(mig()$End[mig()$Id==input$id & mig()$Year==input$year & mig()$Migration=="Spring"])
  start_fall <- yday(mig()$Start[mig()$Id==input$id & mig()$Year==input$year & mig()$Migration=="Fall"])
  end_fall <- yday(mig()$End[mig()$Id==input$id & mig()$Year==input$year & mig()$Migration=="Fall"])
  updateSliderInput(session, "spring", min=1, max=365, value=c(start_spring,end_spring), step=1)
  updateSliderInput(session, "fall", min=1, max=365, value=c(start_fall,end_fall), step=1)
})

observe({
  start_spring <- yday(mig()$Start[mig()$Id==input$id & mig()$Year==input$year & mig()$Migration=="Spring"])
  end_spring <- yday(mig()$End[mig()$Id==input$id & mig()$Year==input$year & mig()$Migration=="Spring"])
  start_fall <- yday(mig()$Start[mig()$Id==input$id & mig()$Year==input$year & mig()$Migration=="Fall"])
  end_fall <- yday(mig()$End[mig()$Id==input$id & mig()$Year==input$year & mig()$Migration=="Fall"])
  updateSliderInput(session, "spring", min=1, max=365, value=c(start_spring,end_spring), step=1)
  updateSliderInput(session, "fall", min=1, max=365, value=c(start_fall,end_fall), step=1)
})

trk <- eventReactive(input$csv1, {
  gps() |>
    make_track(.x=longitude, .y=latitude, .t=timestamp, id=id, longitude=longitude, 
      latitude=latitude, elevation=elevation, year=year, yday=yday, crs = 4326)
})

Boundary <- eventReactive(input$csv1, {
  hr_kde(trk(), levels=0.9999) |> hr_isopleths()
})

trk_select <- reactive({
  trk <- trk() |> filter(id==input$id, year==input$year)
  trk |> mutate(nsd=nsd(trk))
})

last_day <- reactive({
  yday(paste0(input$year, "-12-31"))
})

# Initialize spring map 
output$map1 <- renderLeaflet({
  leaflet(Boundary(), options = leafletOptions(attributionControl = FALSE)) |>
    addProviderTiles("Esri.WorldImagery", group="Esri.WorldImagery") |>
    addProviderTiles("Esri.WorldGrayCanvas", group="Esri.WorldGrayCanvas") |>
    addProviderTiles("Esri.WorldTopoMap", group="Esri.WorldTopoMap") |>
    addPolygons(fillOpacity=0, stroke=TRUE, color="black", weight=2, group="Boundary") |>
    addLayersControl(
      position = "topright",
      baseGroups = c("Esri.WorldTopoMap", "Esri.WorldImagery", "Esri.WorldGrayCanvas"),
      overlayGroups = c("Boundary", "GPS", "GPS Spring", "Tracks"),
      options = layersControlOptions(collapsed = TRUE)
    )
})

# Update the spring layers
observe({
  req(trk_select())
  lines <- trk_select()
  spring <- lines |> filter(yday >= input$spring[1] & yday <= input$spring[2])
  leafletProxy("map1") |>
    clearGroup("GPS") |>
    clearGroup("GPS Spring") |>
    clearGroup("Tracks") |>
    addCircles(data = lines, ~x_, ~y_, color="black", fill="black", weight=1, radius=1, group="GPS") |>
    addCircles(data = spring, ~x_, ~y_, color="red", fill="red", weight=10, radius=10, group="GPS Spring") |>
    addPolylines(data = lines, ~x_, ~y_, stroke=TRUE, color="black", weight=1, group="Tracks")
})


# Initialize fall map 
output$map2 <- renderLeaflet({
  leaflet(Boundary(), options = leafletOptions(attributionControl = FALSE)) |>
    addProviderTiles("Esri.WorldImagery", group="Esri.WorldImagery") |>
    addProviderTiles("Esri.WorldGrayCanvas", group="Esri.WorldGrayCanvas") |>
    addProviderTiles("Esri.WorldTopoMap", group="Esri.WorldTopoMap") |>
    addPolygons(fillOpacity=0, stroke=TRUE, color="black", weight=2, group="Boundary") |>
    addLayersControl(
      position = "topright",
      baseGroups = c("Esri.WorldTopoMap", "Esri.WorldImagery", "Esri.WorldGrayCanvas"),
      overlayGroups = c("Boundary", "GPS", "GPS Fall", "Tracks"),
      options = layersControlOptions(collapsed = TRUE)
    )
})

# Update the fall layers
observe({
  req(trk_select())
  lines <- trk_select()
  fall   <- lines |> filter(yday >= input$fall[1] & yday <= input$fall[2])
  leafletProxy("map2") |>
    clearGroup("GPS") |>
    clearGroup("GPS Fall") |>
    clearGroup("Tracks") |>
    addCircles(data = lines, ~x_, ~y_, color="black", fill="black", weight=1, radius=1, group="GPS") |>
    addCircles(data = fall, ~x_, ~y_, color="red", fill="red", weight=10, radius=10, group="GPS Fall") |>
    addPolylines(data = lines, ~x_, ~y_, stroke=TRUE, color="black", weight=1, group="Tracks")
})

oneRow <- reactive({
  # Subtracts 1 because DOY 1 corresponds to January 1st
  start_spring <- as.character(as.Date(input$spring[1]-1, origin = paste0(input$year, "-01-01", format="%b-%d")))
  end_spring <- as.character(as.Date(input$spring[2]-1, origin = paste0(input$year, "-01-01", format="%b-%d")))
  start_fall <- as.character(as.Date(input$fall[1]-1, origin = paste0(input$year, "-01-01", format="%b-%d")))
  end_fall <- as.character(as.Date(input$fall[2]-1, origin = paste0(input$year, "-01-01", format="%b-%d")))
  v <- c(start_spring, end_spring, start_fall, end_fall)
})

output$tab1a <- renderTable({ 
  if (!is.null(input$csv1)) {
    x <- tibble(
      Id=c(input$id,input$id),
      Year=c(input$year,input$year),
      Migration=c("Spring","Fall"),
      Start=c(oneRow()[1], oneRow()[3]), 
      End=c(oneRow()[2], oneRow()[4]))
    x[1,]
  }
})

output$tab1b <- renderTable({ 
  if (!is.null(input$csv1)) {
    x <- tibble(
      Id=c(input$id,input$id),
      Year=c(input$year,input$year),
      Migration=c("Spring","Fall"),
      Start=c(oneRow()[1], oneRow()[3]), 
      End=c(oneRow()[2], oneRow()[4]))
    x[2,]
  }
})

observeEvent(input$log,{
  if (!is.null(input$csv1)) {
    fo <- paste0(tolower(input$herd),"/migration_segments_",Sys.Date(),".csv")
    log_entry <- paste0(
      input$id,",",input$year,",Spring,", oneRow()[1], ",", oneRow()[2], "\n",
      input$id,",",input$year,",Fall,", oneRow()[3], ",", oneRow()[4])
    if (!file.exists(fo)) {
      write("Id,Year,Migration,Start,End", file = fo)
      write(log_entry, file = fo, append = TRUE)
    } else {
      write(log_entry, file = fo, append = TRUE)
    }
  }
})
```

## Column {width=70%}

### Row {height="50%"}

```{r}
sliderInput("spring", "Spring migration:", min=1, max=365, value=c(91,181), step=1, width="100%")
plotOutput("plotSpring")
```

### Row {height="50%"}

```{r}
sliderInput("fall", "Fall migration:", min=1, max=365, value=c(244,304), step=1, width="100%")
plotOutput("plotFall")
```

```{r}
#| context: server
output$plotSpring <- renderPlot({
ggplot(trk_select()) +
  aes(y = nsd, x = yday, fill = year, text = id) +
  geom_point(size = 1) + 
  geom_path(color="black") +
  geom_vline(xintercept = input$spring[1], color = "red", linetype = "dashed", size = 1) +
  geom_vline(xintercept = input$spring[2], color = "red", linetype = "dashed", size = 1) +
  scale_fill_viridis_c("Year") +
  scale_x_continuous(limits = c(1, last_day())) +
  theme(legend.position="none") +
  labs(x = "Day of year", y = "NSD")
})

output$plotFall <- renderPlot({
ggplot(trk_select()) +
  aes(y = nsd, x = yday, fill = year, text = id) +
  geom_point(size = 1) + 
  geom_path(color="black") +
  geom_vline(xintercept = input$fall[1], color = "red", linetype = "dashed", size = 1) +
  geom_vline(xintercept = input$fall[2], color = "red", linetype = "dashed", size = 1) +
  scale_fill_viridis_c("Year") +
  scale_x_continuous(limits = c(1, last_day())) +
  theme(legend.position="none") +
  labs(x = "Day of year", y = "NSD")
})
```
