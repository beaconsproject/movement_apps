--- 
title: "Annual and Seasonal Ranges"
format: dashboard
server: shiny
---

```{r}
#| context: setup
library(sf)
library(bslib)
library(leaflet)
library(tidyverse)
options(shiny.maxRequestSize=100*1024^2) 
```

## {.sidebar}

**Upload data**

```{r}
fileInput("gpkg", "Seasonal ranges (gpkg):", accept=".gpkg")
hr()
selectInput("herd", "Herd name:", choices=c("Little_Rancheria","Wolf_Lake"))
selectInput("id", "Caribou:", choices=NULL)
selectInput("season", "Season:", choices=c("Annual","Summer","Fall rut","Early winter","Late winter"), selected="Annual")
selectInput("year", "Year:", choices=NULL)
hr()
sliderInput("alpha", "Opacity:", min=0, max=1, value=0.5, step=0.1)
sliderInput("size", "Point size:", min=0, max=10, value=3, step=1)
```

# Distribution {orientation="columns" scrolling="true"}

## Column {width=60%}

```{r}
#| title: Range distribution
leafletOutput("map")
```

```{r}
#| context: server
bnd <- eventReactive(input$gpkg, {
  req(input$gpkg)
  st_read(input$gpkg$datapath, "aoi", quiet=TRUE) |>
    st_transform(4326)
})

iranges <- eventReactive(input$gpkg, {
  req(input$gpkg)
  st_read(input$gpkg$datapath, "ranges", quiet=TRUE) |>
    mutate(level = as.factor(level)) |>
    st_transform(4326)
})

igps <- eventReactive(input$gpkg, {
  req(input$gpkg)
  st_read(input$gpkg$datapath, "gps", quiet=TRUE) |>
    st_transform(4326)
})

observeEvent(input$gpkg, {
  ids <- as.character(sort(unique(iranges()$id)))
  yrs <- unique(iranges()$year)
  updateSelectInput(session, "id", choices=c("Population",ids), selected=ids[2])
  updateSelectInput(session, "year", choices=c("All years", yrs), selected=yrs[3])
})

gps1 <- reactive({
  gps <- igps()
  if (input$id=="Population" & input$season=="Annual" & input$year=="All years") {
    gps
  } else if (input$id=="Population" & input$season=="Annual" & !input$year=="All years") {
    gps |> filter(year==input$year)
  } else if (input$id=="Population" & !input$season=="Annual" & input$year=="All years") {
    gps |> filter(season==input$season)
  } else if (!input$id=="Population" & input$season=="Annual" & input$year=="All years") {
    gps |> filter(id==input$id)
  } else if (input$id=="Population" & !input$season=="Annual" & !input$year=="All years") {
    gps |> filter(season==input$season & year==input$year)
  } else if (!input$id=="Population" & input$season=="Annual" & !input$year=="All years") {
    gps |> filter(id==input$id & year==input$year)
  } else if (!input$id=="Population" & !input$season=="Annual" & input$year=="All years") {
    gps |> filter(id==input$id & season==input$season)
  } else {
    gps |> filter(id==input$id & season==input$season & year==input$year)
  }
})

# Initialize map
output$map <- renderLeaflet({
  req(bnd())
  leaflet(bnd(), options = leafletOptions(attributionControl=FALSE)) |>
    addProviderTiles("Esri.WorldImagery", group="Esri.WorldImagery") |>
    addProviderTiles("Esri.WorldGrayCanvas", group="Esri.WorldGrayCanvas") |>
    addProviderTiles("Esri.WorldTopoMap", group="Esri.WorldTopoMap") |>
    addPolygons(fillOpacity=0, stroke=TRUE, color="black", weight=2, group="Boundary") |>
    addLayersControl(position = "bottomright",
      baseGroups=c("Esri.WorldTopoMap","Esri.WorldImagery","Esri.WorldGrayCanvas"),
      overlayGroups = c("Boundary", "Ranges", "GPS"),
      options = layersControlOptions(collapsed = FALSE)) |>
    hideGroup("")
})

# Update layers
observe({
  req(iranges())
  range1 <- iranges() |> filter(id==input$id, season==input$season, year==input$year)
  pal <- colorFactor(c("#ff9d9a","#77aadd"), levels = levels(range1$level))
  leafletProxy("map") |>
    clearGroup("GPS") |>
    clearGroup("Ranges") |>
    addPolygons(data=range1, stroke=TRUE, color="red", opacity=1, weight=2, fillColor=pal(range1$level), fillOpacity=input$alpha, group="Ranges") |>
    addLegend(data=range1, pal=pal, values=~level, opacity=0.7, title="Level", position="bottomright") |>
    addCircles(data = gps1(), color="black", fill="black", weight=input$size, radius=1, group="GPS") |>
    addLayersControl(position = "topright",
      baseGroups=c("Esri.WorldTopoMap","Esri.WorldImagery","Esri.WorldGrayCanvas"),
      overlayGroups = c("Boundary", "Ranges", "GPS"),
      options = layersControlOptions(collapsed = FALSE)) |>
    hideGroup("")
})

pts <- reactive({
  gps <- igps()
  if (input$id=="Population" & input$season=="Annual" & input$year=="All years") {
    gps
  } else if (input$id=="Population" & input$season=="Annual" & !input$year=="All years") {
    gps |> filter(year==input$year)
  } else if (input$id=="Population" & !input$season=="Annual" & input$year=="All years") {
    gps |> filter(season==input$season)
  } else if (!input$id=="Population" & input$season=="Annual" & input$year=="All years") {
    gps |> filter(id==input$id)
  } else if (input$id=="Population" & !input$season=="Annual" & !input$year=="All years") {
    gps |> filter(season==input$season & year==input$year)
  } else if (!input$id=="Population" & input$season=="Annual" & !input$year=="All years") {
    gps |> filter(id==input$id & year==input$year)
  } else if (!input$id=="Population" & !input$season=="Annual" & input$year=="All years") {
    gps |> filter(id==input$id & season==input$season)
  } else {
    gps |> filter(id==input$id & season==input$season & year==input$year)
  }
})
```

## Column {width=40%}

### Row - two {height="25%"}

```{r}
#| title: Summary stats
verbatimTextOutput("text")
```

### Row - three {height="25%"}

```{r}
#| title: Range area by level
tableOutput("tab")
```

### Row - one {height="50%"}

```{r}
#| title: Range area over time
plotOutput("plot")
```

```{r}
#| context: server
output$text <- renderPrint({
  x <- gps1()
  min_date <- as.character(date(min(x$timestamp)))
  max_date <- as.character(date(max(x$timestamp)))
  n <- nrow(x)
  cat("Caribou:", input$id, "\n")
  cat("Season:", input$season, "\n")
  cat("Start date:", min_date, "\n")
  cat("End date:", max_date, "\n")
  cat("Relocations:", n, "\n\n")
})

range_subset <- reactive({
  iranges() |> st_drop_geometry() |>
    select(id, level, season, year, area_km2) |>
    filter(id==input$id, year==input$year, season==input$season)
})

output$tab <- renderTable({
  range_subset()
})

output$plot <- renderPlot({
  z <- iranges() |> filter(id==input$id, !year=="All years", season==input$season)
  p <- ggplot(z, aes(x = year, y = area_km2, group = level, color = level)) +
    geom_line() +
    geom_point(size = 1.5) +
    labs(title = paste0("Season: ",input$season,"\nCaribou: ",input$id), x = "Year", y = "Area (km2)") +
    theme_minimal() +
    theme(legend.position = "bottom")
  p
})

output$p1 <- renderPlot({
  z1 <- iranges() |> filter(!id=="Population", !year=="All years", season=="Summer", level==0.95)
  p1 <- ggplot(z1, aes(x = year, y = area_km2, group = id, color = id)) +
    geom_line() +
    geom_point(size = 1.5) +
    labs(x = "Year", y = "Range Area (km2)") +
    theme_minimal() +
    theme(legend.position = "none")
p1
})

output$p2 <- renderPlot({
  z2 <- iranges() |> filter(!id=="Population", !year=="All years", season=="Fall rut", level==0.95)
  p2 <- ggplot(z2, aes(x = year, y = area_km2, group = id, color = id)) +
    geom_line() +
    geom_point(size = 1.5) +
    labs(x = "Year", y = "Range Area (km2)") +
    theme_minimal() +
    theme(legend.position = "none")
p2
})

output$p3 <- renderPlot({
  z3 <- iranges() |> filter(!id=="Population", !year=="All years", season=="Early winter", level==0.95)
  p3 <- ggplot(z3, aes(x = year, y = area_km2, group = id, color = id)) +
    geom_line() +
    geom_point(size = 1.5) +
    labs(x = "Year", y = "Range Area (km2)") +
    theme_minimal() +
    theme(legend.position = "none")
p3
})

output$p4 <- renderPlot({
  z4 <- iranges() |> filter(!id=="Population", !year=="All years", season=="Late winter", level==0.95)
  p4 <- ggplot(z4, aes(x = year, y = area_km2, group = id, color = id)) +
    geom_line() +
    geom_point(size = 1.5) +
    labs(x = "Year", y = "Range Area (km2)") +
    theme_minimal() +
    theme(legend.position = "none")
p4
})

```

# Individual variation

## Column {width=50%}

```{r}
#| title: Summer
plotOutput("p1")
```

```{r}
#| title: Fall rut
plotOutput("p2")
```

## Column {width=50%}

```{r}
#| title: Early winter
plotOutput("p3")
```

```{r}
#| title: Late winter
plotOutput("p4")
```
